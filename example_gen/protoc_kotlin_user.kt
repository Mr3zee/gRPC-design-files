// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: example.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
@kotlin.jvm.JvmName("-initializeuser")
public inline fun user(block: UserKt.Dsl.() -> kotlin.Unit): Example.User =
  UserKt.Dsl._create(Example.User.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `User`
 */
public object UserKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: Example.User.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: Example.User.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): Example.User = _builder.build()

    /**
     * `int64 id = 1;`
     */
    public var id: kotlin.Long
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * `int64 id = 1;`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * `string name = 2;`
     */
    public var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * `string name = 2;`
     */
    public fun clearName() {
      _builder.clearName()
    }

    /**
     * `bool married = 3;`
     */
    public var married: kotlin.Boolean
      @JvmName("getMarried")
      get() = _builder.getMarried()
      @JvmName("setMarried")
      set(value) {
        _builder.setMarried(value)
      }
    /**
     * `bool married = 3;`
     */
    public fun clearMarried() {
      _builder.clearMarried()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class FriendsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .User friends = 4;`
     */
     public val friends: com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getFriendsList()
      )
    /**
     * `repeated .User friends = 4;`
     * @param value The friends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addFriends")
    public fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.add(value: Example.User) {
      _builder.addFriends(value)
    }
    /**
     * `repeated .User friends = 4;`
     * @param value The friends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignFriends")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.plusAssign(value: Example.User) {
      add(value)
    }
    /**
     * `repeated .User friends = 4;`
     * @param values The friends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllFriends")
    public fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.addAll(values: kotlin.collections.Iterable<Example.User>) {
      _builder.addAllFriends(values)
    }
    /**
     * `repeated .User friends = 4;`
     * @param values The friends to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllFriends")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.plusAssign(values: kotlin.collections.Iterable<Example.User>) {
      addAll(values)
    }
    /**
     * `repeated .User friends = 4;`
     * @param index The index to set the value at.
     * @param value The friends to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setFriends")
    public operator fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.set(index: kotlin.Int, value: Example.User) {
      _builder.setFriends(index, value)
    }
    /**
     * `repeated .User friends = 4;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearFriends")
    public fun com.google.protobuf.kotlin.DslList<Example.User, FriendsProxy>.clear() {
      _builder.clearFriends()
    }


    /**
     * `optional .User spouse = 5;`
     */
    public var spouse: Example.User
      @JvmName("getSpouse")
      get() = _builder.getSpouse()
      @JvmName("setSpouse")
      set(value) {
        _builder.setSpouse(value)
      }
    /**
     * `optional .User spouse = 5;`
     */
    public fun clearSpouse() {
      _builder.clearSpouse()
    }
    /**
     * `optional .User spouse = 5;`
     * @return Whether the spouse field is set.
     */
    public fun hasSpouse(): kotlin.Boolean {
      return _builder.hasSpouse()
    }
    public val UserKt.Dsl.spouseOrNull: Example.User?
      get() = _builder.spouseOrNull

    /**
     * `.Address address = 6;`
     */
    public var address: Example.Address
      @JvmName("getAddress")
      get() = _builder.getAddress()
      @JvmName("setAddress")
      set(value) {
        _builder.setAddress(value)
      }
    /**
     * `.Address address = 6;`
     */
    public fun clearAddress() {
      _builder.clearAddress()
    }
    /**
     * `.Address address = 6;`
     * @return Whether the address field is set.
     */
    public fun hasAddress(): kotlin.Boolean {
      return _builder.hasAddress()
    }

    /**
     * `string email = 7;`
     */
    public var email: kotlin.String
      @JvmName("getEmail")
      get() = _builder.getEmail()
      @JvmName("setEmail")
      set(value) {
        _builder.setEmail(value)
      }
    /**
     * `string email = 7;`
     */
    public fun clearEmail() {
      _builder.clearEmail()
    }
    /**
     * `string email = 7;`
     * @return Whether the email field is set.
     */
    public fun hasEmail(): kotlin.Boolean {
      return _builder.hasEmail()
    }

    /**
     * `string phone = 8;`
     */
    public var phone: kotlin.String
      @JvmName("getPhone")
      get() = _builder.getPhone()
      @JvmName("setPhone")
      set(value) {
        _builder.setPhone(value)
      }
    /**
     * `string phone = 8;`
     */
    public fun clearPhone() {
      _builder.clearPhone()
    }
    /**
     * `string phone = 8;`
     * @return Whether the phone field is set.
     */
    public fun hasPhone(): kotlin.Boolean {
      return _builder.hasPhone()
    }
    public val contactCase: Example.User.ContactCase
      @JvmName("getContactCase")
      get() = _builder.getContactCase()

    public fun clearContact() {
      _builder.clearContact()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun Example.User.copy(block: UserKt.Dsl.() -> kotlin.Unit): Example.User =
  UserKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val Example.UserOrBuilder.spouseOrNull: Example.User?
  get() = if (hasSpouse()) getSpouse() else null

public val Example.UserOrBuilder.addressOrNull: Example.Address?
  get() = if (hasAddress()) getAddress() else null

