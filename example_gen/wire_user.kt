// Code generated by Wire protocol buffer compiler, do not edit.
// Source: User in example.proto
@file:Suppress("DEPRECATION")

import com.squareup.wire.*
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.internal.*
import okio.ByteString

public class User(
    @field:WireField(
        tag = 1,
        adapter = "com.squareup.wire.ProtoAdapter#INT64",
        label = WireField.Label.OMIT_IDENTITY,
        schemaIndex = 0,
    )
    public val id: Long = 0L,
    @field:WireField(
        tag = 2,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        label = WireField.Label.OMIT_IDENTITY,
        schemaIndex = 1,
    )
    public val name: String = "",
    @field:WireField(
        tag = 3,
        adapter = "com.squareup.wire.ProtoAdapter#BOOL",
        label = WireField.Label.OMIT_IDENTITY,
        schemaIndex = 2,
    )
    public val married: Boolean = false,
    friends: List<User> = emptyList(),
    @field:WireField(
        tag = 5,
        adapter = "User#ADAPTER",
        schemaIndex = 4,
    )
    public val spouse: User? = null,
    @field:WireField(
        tag = 6,
        adapter = "Address#ADAPTER",
        label = WireField.Label.OMIT_IDENTITY,
        schemaIndex = 5,
    )
    public val address: Address? = null,
    @field:WireField(
        tag = 7,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        oneofName = "contact",
        schemaIndex = 6,
    )
    public val email: String? = null,
    @field:WireField(
        tag = 8,
        adapter = "com.squareup.wire.ProtoAdapter#STRING",
        oneofName = "contact",
        schemaIndex = 7,
    )
    public val phone: String? = null,
    unknownFields: ByteString = ByteString.EMPTY,
) : Message<User, Nothing>(ADAPTER, unknownFields) {
    @field:WireField(
        tag = 4,
        adapter = "User#ADAPTER",
        label = WireField.Label.REPEATED,
        schemaIndex = 3,
    )
    public val friends: List<User> = immutableCopyOf("friends", friends)

    init {
        require(countNonNull(email, phone) <= 1) {
            "At most one of email, phone may be non-null"
        }
    }

    @Deprecated(
        message = "Shouldn't be used in Kotlin",
        level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw
    AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is User) return false
        if (unknownFields != other.unknownFields) return false
        if (id != other.id) return false
        if (name != other.name) return false
        if (married != other.married) return false
        if (friends != other.friends) return false
        if (spouse != other.spouse) return false
        if (address != other.address) return false
        if (email != other.email) return false
        if (phone != other.phone) return false
        return true
    }

    override fun hashCode(): Int {
        var result = super.hashCode
        if (result == 0) {
            result = unknownFields.hashCode()
            result = result * 37 + id.hashCode()
            result = result * 37 + name.hashCode()
            result = result * 37 + married.hashCode()
            result = result * 37 + friends.hashCode()
            result = result * 37 + (spouse?.hashCode() ?: 0)
            result = result * 37 + (address?.hashCode() ?: 0)
            result = result * 37 + (email?.hashCode() ?: 0)
            result = result * 37 + (phone?.hashCode() ?: 0)
            super.hashCode = result
        }
        return result
    }

    override fun toString(): String {
        val result = mutableListOf<String>()
        result += """id=$id"""
        result += """name=${sanitize(name)}"""
        result += """married=$married"""
        if (friends.isNotEmpty()) result += """friends=$friends"""
        if (spouse != null) result += """spouse=$spouse"""
        if (address != null) result += """address=$address"""
        if (email != null) result += """email=${sanitize(email)}"""
        if (phone != null) result += """phone=${sanitize(phone)}"""
        return result.joinToString(prefix = "User{", separator = ", ", postfix = "}")
    }

    public fun copy(
        id: Long = this.id,
        name: String = this.name,
        married: Boolean = this.married,
        friends: List<User> = this.friends,
        spouse: User? = this.spouse,
        address: Address? = this.address,
        email: String? = this.email,
        phone: String? = this.phone,
        unknownFields: ByteString = this.unknownFields,
    ): User = User(id, name, married, friends, spouse, address, email, phone, unknownFields)

    public companion object {
        @JvmField
        public val ADAPTER: ProtoAdapter<User> = object : ProtoAdapter<User>(
            FieldEncoding.LENGTH_DELIMITED,
            User::class,
            "type.googleapis.com/User",
            PROTO_3,
            null,
            "example.proto"
        ) {
            override fun encodedSize(`value`: User): Int {
                var size = value.unknownFields.size
                if (value.id != 0L) {
                    size += ProtoAdapter.INT64.encodedSizeWithTag(1, value.id)
                }
                if (value.name != "") {
                    size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.name)
                }
                if (value.married != false) {
                    size += ProtoAdapter.BOOL.encodedSizeWithTag(3, value.married)
                }
                size += User.ADAPTER.asRepeated().encodedSizeWithTag(4, value.friends)
                size += User.ADAPTER.encodedSizeWithTag(5, value.spouse)
                if (value.address != null) {
                    size += Address.ADAPTER.encodedSizeWithTag(6, value.address)
                }
                size += ProtoAdapter.STRING.encodedSizeWithTag(7, value.email)
                size += ProtoAdapter.STRING.encodedSizeWithTag(8, value.phone)
                return size
            }

            override fun encode(writer: ProtoWriter, `value`: User) {
                if (value.id != 0L) {
                    ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id)
                }
                if (value.name != "") {
                    ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
                }
                if (value.married != false) {
                    ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.married)
                }
                User.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.friends)
                User.ADAPTER.encodeWithTag(writer, 5, value.spouse)
                if (value.address != null) {
                    Address.ADAPTER.encodeWithTag(writer, 6, value.address)
                }
                ProtoAdapter.STRING.encodeWithTag(writer, 7, value.email)
                ProtoAdapter.STRING.encodeWithTag(writer, 8, value.phone)
                writer.writeBytes(value.unknownFields)
            }

            override fun encode(writer: ReverseProtoWriter, `value`: User) {
                writer.writeBytes(value.unknownFields)
                ProtoAdapter.STRING.encodeWithTag(writer, 8, value.phone)
                ProtoAdapter.STRING.encodeWithTag(writer, 7, value.email)
                if (value.address != null) {
                    Address.ADAPTER.encodeWithTag(writer, 6, value.address)
                }
                User.ADAPTER.encodeWithTag(writer, 5, value.spouse)
                User.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.friends)
                if (value.married != false) {
                    ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.married)
                }
                if (value.name != "") {
                    ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name)
                }
                if (value.id != 0L) {
                    ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id)
                }
            }

            override fun decode(reader: ProtoReader): User {
                var id: Long = 0L
                var name: String = ""
                var married: Boolean = false
                val friends = mutableListOf<User>()
                var spouse: User? = null
                var address: Address? = null
                var email: String? = null
                var phone: String? = null
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> id = ProtoAdapter.INT64.decode(reader)
                        2 -> name = ProtoAdapter.STRING.decode(reader)
                        3 -> married = ProtoAdapter.BOOL.decode(reader)
                        4 -> friends.add(User.ADAPTER.decode(reader))
                        5 -> spouse = User.ADAPTER.decode(reader)
                        6 -> address = Address.ADAPTER.decode(reader)
                        7 -> email = ProtoAdapter.STRING.decode(reader)
                        8 -> phone = ProtoAdapter.STRING.decode(reader)
                        else -> reader.readUnknownField(tag)
                    }
                }
                return User(
                    id = id,
                    name = name,
                    married = married,
                    friends = friends,
                    spouse = spouse,
                    address = address,
                    email = email,
                    phone = phone,
                    unknownFields = unknownFields
                )
            }

            override fun redact(`value`: User): User = value.copy(
                friends = value.friends.redactElements(User.ADAPTER),
                spouse = value.spouse?.let(User.ADAPTER::redact),
                address = value.address?.let(Address.ADAPTER::redact),
                unknownFields = ByteString.EMPTY
            )
        }

        private const val serialVersionUID: Long = 0L
    }
}
